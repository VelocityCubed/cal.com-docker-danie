name: Build and Push to Azure Container Registry

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CONTAINER_PORT: 3000


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (without recursive submodules)
        uses: actions/checkout@v4
        with:
          submodules: false  # Prevent recursive fetching
          fetch-depth: 0      # Fetch full history to avoid submodule issues

      - name: Initialize and update submodules correctly
        run: |
          git submodule update --remote --init

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract short SHA for tagging
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Test container name
        run: |
          # Function to sanitize the repository name
          sanitize_name() {
            local name="$1"
            # Convert to lowercase
            name="${name,,}"
            # Replace invalid characters with hyphens
            name="$(echo "$name" | sed 's/[^a-z0-9-]/-/g')"
            # Remove leading or trailing hyphens
            name="$(echo "$name" | sed 's/^-*//;s/-*$//')"
            # Ensure the name starts and ends with a lowercase letter or number
            if [[ ! "$name" =~ ^[a-z0-9] ]]; then
              name="a$name"
            fi
            if [[ ! "$name" =~ [a-z0-9]$ ]]; then
              name="${name}a"
            fi
            echo "$name"
          }

          # Extract the repository name from GITHUB_REPOSITORY
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          # Sanitize the repository name
          SANITIZED_NAME=$(sanitize_name "$REPO_NAME")
          echo sanitizedName: "$SANITIZED_NAME"

          echo "${{ secrets.ACR_NAME }}.azurecr.io/image-${GITHUB_REPOSITORY##*/}:${{ env.IMAGE_TAG }}"

          docker login ${{ secrets.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

          az config set extension.use_dynamic_install=yes_without_prompt

          az config set extension.dynamic_install_allow_preview=true


      - name: Add container backend to existing Front Door (AFD)
        id: create_fd_entries
        run: |
          # Function to sanitize the repository name
          sanitize_name() {
            local name="$1"
            # Convert to lowercase
            name="${name,,}"
            # Replace invalid characters with hyphens
            name="$(echo "$name" | sed 's/[^a-z0-9-]/-/g')"
            # Remove leading or trailing hyphens
            name="$(echo "$name" | sed 's/^-*//;s/-*$//')"
            # Ensure the name starts and ends with a lowercase letter or number
            if [[ ! "$name" =~ ^[a-z0-9] ]]; then
              name="a$name"
            fi
            if [[ ! "$name" =~ [a-z0-9]$ ]]; then
              name="${name}a"
            fi
            echo "$name"
          }

          # Extract the repository name from GITHUB_REPOSITORY
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          # Sanitize the repository name
          SANITIZED_NAME=$(sanitize_name "$REPO_NAME")

          # Set variables
          RESOURCE_GROUP="${{ secrets.ACI_RESOURCE_GROUP }}"
          PROFILE_NAME="fertilitymapper"                      # Your Front Door/CDN profile name
          ORIGIN_GROUP="og-$SANITIZED_NAME"               # Name for the origin group (choose as desired)
          ORIGIN_NAME="origin-$SANITIZED_NAME"              # Unique name for this origin
          CONTAINER_HOSTNAME="${SANITIZED_NAME}.westeurope.azurecontainer.io"
          ENDPOINT_NAME="${SANITIZED_NAME}-endpoint"                   # Replace with your Front Door endpoint name
          # CONTAINER_PORT should be set in your workflow environment

          echo "Create endpoint"
          echo "Endpoint: ${ENDPOINT_NAME}"
          az afd endpoint create -g $RESOURCE_GROUP --endpoint-name $ENDPOINT_NAME --profile-name $PROFILE_NAME --enabled-state Enabled

          echo "Creating (or updating) origin group '${ORIGIN_GROUP}' in Front Door profile '${PROFILE_NAME}'..."
          az afd origin-group create \
            --resource-group "$RESOURCE_GROUP" \
            --origin-group-name og-$SANITIZED_NAME \
            --profile-name "$PROFILE_NAME" \
            --probe-request-type GET \
            --probe-protocol Http \
            --probe-interval-in-seconds 60 \
            --probe-path / \
            --sample-size 4 \
            --successful-samples-required 3 \
            --additional-latency-in-milliseconds 50

          echo "Adding origin '${ORIGIN_NAME}' with hostname '${CONTAINER_HOSTNAME}'..."
          
          az afd origin create \
            --resource-group "$RESOURCE_GROUP" \
            --host-name $CONTAINER_HOSTNAME \
            --profile-name "$PROFILE_NAME" \
            --origin-group-name og-$SANITIZED_NAME \
            --origin-name origin-$SANITIZED_NAME \
            --origin-host-header "$CONTAINER_HOSTNAME"  \
            --priority 1 \
            --weight 1000 \
            --enabled-state Enabled \
            --http-port $CONTAINER_PORT \



          echo "Container backend added to Front Door profile '${PROFILE_NAME}' successfully."

          hostName=$(az afd endpoint show \
            --profile-name "$PROFILE_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --endpoint-name "$ENDPOINT_NAME" \
            --query hostName -o tsv)
          
          # Print it (for logging purposes)
          echo "Host name is: $hostName"
          
          # Save it as an output variable for the step
          echo "hostName=$hostName" >> $GITHUB_OUTPUT
          echo "SANITIZED_NAME=$SANITIZED_NAME" >> $GITHUB_OUTPUT

      - name: Associate Custom Domain to Front Door
        run: |
          CUSTOM_DOMAIN="${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}.fertilitymapper.com"
          RESOURCE_GROUP="${{ secrets.ACI_RESOURCE_GROUP }}"
          PROFILE_NAME="fertilitymapper"
          ENDPOINT_NAME="${{ steps.create_fd_entries.outputs.hostName }}"
          
          echo "Associating custom domain: $CUSTOM_DOMAIN"

          DNS_ZONE_ID=$(az network dns zone show --name fertilitymapper.com --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} --query id -o tsv)
          echo "DNS Zone ID: $DNS_ZONE_ID"



          # Step 1: Create a custom domain in Azure Front Door
          az afd custom-domain create \
            --resource-group "$RESOURCE_GROUP" \
            --profile-name "$PROFILE_NAME" \
            --custom-domain-name "${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" \
            --host-name "$CUSTOM_DOMAIN" \
            --minimum-tls-version TLS12 \
            --azure-dns-zone $DNS_ZONE_ID \
            --certificate-type ManagedCertificate

            az network dns record-set cname create \
            --name "${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" \
            --zone-name fertilitymapper.com \
            --resource-group ${{ secrets.ACI_RESOURCE_GROUP }}
            
            az network dns record-set cname set-record -g ${{ secrets.ACI_RESOURCE_GROUP }} -z fertilitymapper.com \
            -n "${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" -c "${{ steps.create_fd_entries.outputs.hostName }}"

            VALIDATION_TOKEN=$(az afd custom-domain show --resource-group "${{ secrets.ACI_RESOURCE_GROUP }}" --profile-name "fertilitymapper"  --custom-domain-name "${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" --query validationProperties.validationToken | sed 's/"//g')

            DOMAIN_ID=$(az afd custom-domain show --resource-group "${{ secrets.ACI_RESOURCE_GROUP }}" --profile-name "fertilitymapper"  --custom-domain-name "${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" --query id | sed 's/"//g')

            az network dns record-set txt create -g ${{ secrets.ACI_RESOURCE_GROUP }} -z fertilitymapper.com -n "_dnsauth.${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" --ttl 3600
            az network dns record-set txt add-record -g ${{ secrets.ACI_RESOURCE_GROUP }} -z fertilitymapper.com -n "_dnsauth.${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" -v $VALIDATION_TOKEN

            echo Domain Id: $DOMAIN_ID




            echo "Creating (or updating) a route to forward traffic to origin group '${ORIGIN_GROUP}'..."
            az afd route create \
            --resource-group "${{ secrets.ACI_RESOURCE_GROUP }}" \
            --profile-name "$PROFILE_NAME" \
            --endpoint-name "${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}-endpoint" \
            --route-name "container-route-${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" \
            --origin-group "og-${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" \
            --patterns "/*" \
            --forwarding-protocol HttpOnly \
            --link-to-default-domain Enabled \
            --custom-domains "[{id:'$DOMAIN_ID',isActive:true,resourceGroup:${{ secrets.ACI_RESOURCE_GROUP }} }]"

            az afd route update  \
            --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} \
            --profile-name "$PROFILE_NAME" \
            --endpoint-name "${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}-endpoint"  \
            --route-name "container-route-${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}" \
            --custom-domains "[{id:'$DOMAIN_ID',isActive:true,resourceGroup:${{ secrets.ACI_RESOURCE_GROUP }} }]"



            echo Validation JSON: $VALIDATION_TOKEN

      - name: Build and push Docker image
        run: |
          echo "HOSTNAME: ${{ steps.create_fd_entries.outputs.hostName }}"
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/image-${GITHUB_REPOSITORY##*/}:${{ env.IMAGE_TAG }} \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/image-${GITHUB_REPOSITORY##*/}:latest \
            --push .

          az acr repository show --name ${{ secrets.ACR_NAME }} --image image-${GITHUB_REPOSITORY##*/}:${{ env.IMAGE_TAG }}

      - name: Deploy to Azure Container Instance
        run: |
          # Function to sanitize the repository name
          sanitize_name() {
            local name="$1"
            # Convert to lowercase
            name="${name,,}"
            # Replace invalid characters with hyphens
            name="$(echo "$name" | sed 's/[^a-z0-9-]/-/g')"
            # Remove leading or trailing hyphens
            name="$(echo "$name" | sed 's/^-*//;s/-*$//')"
            # Ensure the name starts and ends with a lowercase letter or number
            if [[ ! "$name" =~ ^[a-z0-9] ]]; then
              name="a$name"
            fi
            if [[ ! "$name" =~ [a-z0-9]$ ]]; then
              name="${name}a"
            fi
            echo "$name"
          }

          # Extract the repository name from GITHUB_REPOSITORY
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          # Sanitize the repository name
          SANITIZED_NAME=$(sanitize_name "$REPO_NAME")

          az container create \
            --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} \
            --name "$SANITIZED_NAME" \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/image-${GITHUB_REPOSITORY##*/}:${{ env.IMAGE_TAG }} \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --cpu 2 \
            --memory 4 \
            --os-type Linux \
            --location westeurope \
            --ports $CONTAINER_PORT \
            --dns-name-label "$SANITIZED_NAME" \
            --restart-policy Always \
            --environment-variables \
              NEXT_PUBLIC_DEBUG=1 \
              NODE_OPTIONS="--max_old_space_size=8192" \
              CALCOM_PRIVATE_API_ROUTE="https://goblin.cal.com" \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              DATABASE_DIRECT_URL="${{ secrets.DATABASE_URL }}" \
              NEXT_PUBLIC_WEBAPP_URL="https://${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}.fertilitymapper.com" \
              NEXT_PUBLIC_WEBSITE_URL="https://${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}.fertilitymapper.com" \
              NEXT_PUBLIC_CONSOLE_URL="http://localhost:3004" \
              NEXT_PUBLIC_EMBED_LIB_URL="${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}.fertilitymapper.com/embed/embed.js" \
              ALLOWED_HOSTNAMES='"cal.com","cal.dev","cal-staging.com","cal.community","cal.local:3000","localhost:3000","${{ steps.create_fd_entries.outputs.hostName }}","${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}.fertilitymapper.com"' \
              RESERVED_SUBDOMAINS='"app","auth","docs","design","console","go","status","api","saml","www","matrix","developer","cal","my","team","support","security","blog","learn","admin"' \
              NEXTAUTH_URL="https://${{ steps.create_fd_entries.outputs.SANITIZED_NAME }}.fertilitymapper.com" \
              NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
              CRON_API_KEY="0cc0e6c35519bba620c9360cfe3e68d0" \
              CALENDSO_ENCRYPTION_KEY="${{ secrets.CALENDSO_ENCRYPTION_KEY }}" \
              PLAIN_API_URL="https://api.plain.com/v1" \
              AB_TEST_BUCKET_PROBABILITY=50 \
              MS_GRAPH_CLIENT_ID="${{ secrets.MS_GRAPH_CLIENT_ID }}" \
              MS_GRAPH_CLIENT_SECRET="${{ secrets.MS_GRAPH_CLIENT_SECRET }}" \
              EMAIL_FROM="${{ secrets.EMAIL_FROM }}" \
              EMAIL_SERVER_HOST="${{ secrets.EMAIL_SERVER_HOST }}" \
              EMAIL_SERVER_PORT="${{ secrets.EMAIL_SERVER_PORT }}" \
              EMAIL_SERVER_USER="${{ secrets.EMAIL_SERVER_USER }}" \
              EMAIL_SERVER_PASSWORD="${{ secrets.EMAIL_SERVER_PASSWORD }}" 

